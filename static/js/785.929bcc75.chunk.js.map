{"version":3,"file":"static/js/785.929bcc75.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://scandiweb-test-work/./src/views/styles.module.css?8887","../node_modules/nanoid/index.browser.js","views/AddProductViews.js"],"sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"styles_form__7-HUU\",\"label\":\"styles_label__TKSEc\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useState } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { useNavigate } from \"react-router\";\r\nimport styles from './styles.module.css';\r\nimport { nanoid } from 'nanoid'\r\n\r\nconst AddProductView = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const [sku, setSku] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [switcher, setSwitcher] = useState('dvd');\r\n    const [size, setSize] = useState('');\r\n    const [height, setHeight] = useState('');\r\n    const [width, setWidth] = useState('');\r\n    const [length, setLength] = useState('');\r\n    const [weight, setWeight] = useState('');\r\n\r\n    const inputChange = ({ currentTarget }) => {\r\n        const { name, value } = currentTarget;\r\n\r\n        switch (name) {\r\n            case 'sku':\r\n                setSku(value);\r\n                break;\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'price':\r\n                setPrice(value);\r\n                break;\r\n            case 'size':\r\n                setSize(value)\r\n                break;\r\n            case 'height':\r\n                setHeight(value)\r\n                break;\r\n            case 'width':\r\n                setWidth(value)\r\n                break;\r\n            case 'length':\r\n                setLength(value)\r\n                break;\r\n            case 'weight':\r\n                setWeight(value)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleChange = ({ currentTarget }) => {\r\n        const { value } = currentTarget;\r\n\r\n        switch (value) {\r\n            case 'dvd':\r\n                setSwitcher(value)\r\n                break;\r\n            case 'furniture':     \r\n                setSwitcher(value)\r\n                break;\r\n            case 'weight':\r\n                setSwitcher(value)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        switcherHandleChange();\r\n    };\r\n\r\n    const switcherHandleChange = () => {\r\n        setSize('');\r\n        setHeight('');\r\n        setWidth('');\r\n        setLength('');\r\n        setWeight('');\r\n    };\r\n\r\n    const addProduct = (product) => {\r\n        const products = JSON.parse(window.localStorage.getItem('products'));\r\n\r\n        if (products.find(({ sku }) => sku === product.sku)) {\r\n            alert(`A product SKU ${product.sku} already exists`);\r\n        } else {\r\n            const newProducts = [...products, product];\r\n            window.localStorage.setItem('products', JSON.stringify(newProducts))\r\n            // console.log(products)\r\n            clearForm();\r\n            navigate('/');\r\n        }\r\n    }\r\n\r\n    const onFormSubmit = evt => {\r\n        evt.preventDefault();\r\n\r\n        const productData = { sku, name, price, size, height, width, length, weight, id: nanoid(), checked: false }\r\n        // console.log({sku, name, price, size, height, width, length, weight });\r\n\r\n        addProduct(productData);\r\n    };\r\n\r\n    const clearForm = () => {\r\n        setSku('');\r\n        setName('');\r\n        setPrice('');\r\n        setSize('');\r\n        setHeight('');\r\n        setWidth('');\r\n        setLength('');\r\n        setWeight('');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1>Product Add Page</h1>\r\n            <hr/>\r\n            <form id='product_form'\r\n                className={styles.form}\r\n                onSubmit={onFormSubmit}>\r\n                <label className={styles.label}>\r\n                    SKU\r\n                    <input\r\n                        onInvalid={()=>alert('You must fill out the form!')}\r\n                        id='sku'\r\n                        value={sku}\r\n                        type=\"text\"\r\n                        name=\"sku\"\r\n                        pattern=\"[a-zA-Z0-9]+\"\r\n                        title=\"Please, provide sku\"\r\n                        onChange={inputChange}\r\n                        autoComplete=\"off\"\r\n                        required\r\n                    />\r\n                </label>\r\n                 <label className={styles.label}>\r\n                    Name\r\n                    <input\r\n                        id='name'\r\n                        value={name}\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        pattern=\"[a-zA-Z0-9]+\"\r\n                        title=\"Please, provide name\"\r\n                        onChange={inputChange}\r\n                        autoComplete=\"off\"\r\n                        required\r\n                    />\r\n                </label>\r\n                 <label className={styles.label}>\r\n                    Price\r\n                    <input\r\n                        id='price'\r\n                        value={price}\r\n                        type=\"text\"\r\n                        name=\"price\"\r\n                        pattern=\"[0-9]+\"\r\n                        title=\"Please, provide price\"\r\n                        onChange={inputChange}\r\n                        // autoComplete=\"off\"\r\n                        required\r\n                    />\r\n                </label>\r\n                \r\n                 <label className={styles.label}>\r\n                    Type Switcher\r\n                    <select id='productType' onChange={handleChange}>\r\n                        <option value=\"dvd\">DVD Size, MB</option>\r\n                        <option value=\"furniture\">Furniture H*W*L</option>\r\n                        <option value=\"weight\">Book weight, kg</option>\r\n                    </select>\r\n                </label>\r\n\r\n                {switcher === 'dvd' &&\r\n                     <label className={styles.label}>\r\n                        Size, MB\r\n                        <input\r\n                            id='size'\r\n                            value={size}\r\n                            type=\"text\"\r\n                            name=\"size\"\r\n                            pattern=\"[0-9]+\"\r\n                            title=\"Please, provide size\"\r\n                            onChange={inputChange}\r\n                            // autoComplete=\"off\"\r\n                            required\r\n                        />\r\n                    </label>}\r\n\r\n                {switcher === 'furniture' &&\r\n                    <>\r\n                     <label className={styles.label}>\r\n                            Height (CM)\r\n                            <input\r\n                                id='height'\r\n                                value={height}\r\n                                type=\"text\"\r\n                                name=\"height\"\r\n                                pattern=\"[0-9]+\"\r\n                                title=\"Please, provide height\"\r\n                            onChange={inputChange}\r\n                            // autoComplete=\"off\"\r\n                                required\r\n                            />\r\n                        </label>\r\n                         <label className={styles.label}>\r\n                            Width (CM)\r\n                            <input\r\n                                id='width'\r\n                                value={width}\r\n                                type=\"text\"\r\n                                name=\"width\"\r\n                                pattern=\"[0-9]+\"\r\n                                title=\"Please, provide width\"\r\n                            onChange={inputChange}\r\n                            // autoComplete=\"off\"\r\n                                required\r\n                            />\r\n                        </label>\r\n                         <label className={styles.label}>\r\n                            Length (CM)\r\n                            <input\r\n                                id='length'\r\n                                value={length}\r\n                                type=\"text\"\r\n                                name=\"length\"\r\n                                pattern=\"[0-9]+\"\r\n                                title=\"Please, provide length\"\r\n                            onChange={inputChange}\r\n                            // autoComplete=\"off\"\r\n                                required\r\n                            />\r\n                        </label>\r\n                    </>}\r\n\r\n                {switcher === 'weight' &&\r\n                     <label className={styles.label}>\r\n                        Weight (CM)\r\n                        <input\r\n                            id='weight'\r\n                            value={weight}\r\n                            type=\"text\"\r\n                            name=\"weight\"\r\n                            pattern=\"[0-9]+\"\r\n                            title=\"Please, provide weight\"\r\n                            onChange={inputChange}\r\n                            // autoComplete=\"off\"\r\n                            required\r\n                        />\r\n                    </label>}\r\n                \r\n                <button type=\"submit\">Save</button>\r\n\r\n                <Link to=\"/\">\r\n                    <button type=\"button\" onClick={clearForm}>Cancel</button>\r\n                </Link>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddProductView;"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","navigate","useNavigate","useState","sku","setSku","name","setName","price","setPrice","switcher","setSwitcher","setSize","height","setHeight","width","setWidth","length","setLength","weight","setWeight","inputChange","currentTarget","value","switcherHandleChange","clearForm","className","styles","onSubmit","evt","preventDefault","product","products","JSON","parse","window","localStorage","getItem","find","alert","newProducts","setItem","stringify","addProduct","checked","onInvalid","type","pattern","title","onChange","autoComplete","required","to","onClick"],"sourceRoot":""}